@page "/login"


<div class="h-screen flex justify-center items-center logimg">
    <form class="w-full max-w-xs flex flex-col form-input" action="">
        <div class="text-center">
            <h1 class="text-[30px] mb-12 text-white font-[500]">Log in for BrainBurst</h1>
        </div>

        @if (ShowErrors)
        {
            <div class="alert alert-danger" role="alert">
                <p>@Error</p>
            </div>
        }
        <div class="mb-12">

            <div class="mb-5 flex border-b-2">
                <i class='bx bx-envelope text-[20px] mr-4 mt-[8px]' style='color:#fffefe'></i>

                <div class="relative">
                    <input @bind="loginModel.Email" id="email" name="email" type="email" class="w-full h-10 text-[white] bg-transparent placeholder-transparent peer focus:outline-none" placeholder="kamster" />
                    <label for="email" class="absolute left-0 -top-3.5 text-[white] text-[15px] transition-all duration-300 peer-placeholder-shown:text-base peer-placeholder-shown:text-white peer-placeholder-shown:top-2 peer-focus:-top-3.5 peer-focus:text-[white] peer-focus:text-sm">Email</label>
                </div>
            </div>

            <div class="mt-5 flex border-b-2">
                <i class='bx bxs-lock text-[20px] mr-4 mt-[8px]' style='color:#fffefe'></i>

                <div class="relative">
                    <input @bind="loginModel.Password" id="password" name="password" type="password" class="w-full h-10 text-[white] bg-transparent placeholder-transparent peer focus:outline-none" placeholder="kamster" />
                    <label for="password" class="absolute left-0 -top-3.5 text-[white] text-[15px] transition-all duration-300 peer-placeholder-shown:text-base peer-placeholder-shown:text-white peer-placeholder-shown:top-2 peer-focus:-top-3.5 peer-focus:text-[white] peer-focus:text-sm">Password</label>
                </div>
            </div>

        </div>

        <div @onclick="UserLogin" class="flex justify-center rounded-lg w-full py-3 bg-[#172d42]">
            <i class='bx bxs-user-check text-[24px] mr-2 text-white'></i>
            <label class="text-white font-bold">
                Log in
            </label>
        </div>

        <span class="text-center my-4 text-white font-bold">Or</span>

        <button type="button"
                class="w-full block bg-white hover:bg-gray-100 focus:bg-gray-100 text-gray-900 font-semibold rounded-lg py-3 border border-gray-300">
            <div class="flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="w-6 h-6"
                     viewBox="0 0 48 48">
                    <defs>
                        <path id="a"
                              d="M44.5 20H24v8.5h11.8C34.7 33.9 30.1 37 24 37c-7.2 0-13-5.8-13-13s5.8-13 13-13c3.1 0 5.9 1.1 8.1 2.9l6.4-6.4C34.6 4.1 29.6 2 24 2 11.8 2 2 11.8 2 24s9.8 22 22 22c11 0 21-8 21-22 0-1.3-.2-2.7-.5-4z" />
                    </defs>
                    <clipPath id="b">
                        <use xlink:href="#a" overflow="visible" />
                    </clipPath>
                    <path clip-path="url(#b)" fill="#FBBC05" d="M0 37V11l17 13z" />
                    <path clip-path="url(#b)" fill="#EA4335" d="M0 11l17 13 7-6.1L48 14V0H0z" />
                    <path clip-path="url(#b)" fill="#34A853" d="M0 37l30-23 7.9 1L48 0v48H0z" />
                    <path clip-path="url(#b)" fill="#4285F4" d="M48 48L17 24l-4-3 35-10z" />
                </svg>
                <span class="ml-4">
                    Log in
                    with
                    Google
                </span>
            </div>
        </button>

        <div class="flex justify-between mt-8">
            <p class="text-white font-[400]">Don't have an account?</p>
            <a href="signup.html" class="font-[400] text-white">Sign Up</a>
        </div>


    </form>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors;
    private string Error = "";    

    private async Task UserLogin()
    {
        ShowErrors = false;

        var result = await AuthService.Login(loginModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Error = result.Error;
            ShowErrors = true;
        }
    }
}